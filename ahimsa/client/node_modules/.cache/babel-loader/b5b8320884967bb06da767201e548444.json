{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCEY9NcbLCRUo1bGQi8wFUEzo7N_B3j5B0\",\n  authDomain: \"ahimsa-a62aa.firebaseapp.com\",\n  databaseURL: \"https://ahimsa-a62aa.firebaseio.com\",\n  projectId: \"ahimsa-a62aa\",\n  storageBucket: \"ahimsa-a62aa.appspot.com\",\n  messagingSenderId: \"736204403852\",\n  appId: \"1:736204403852:web:45c3c91bc49e5b492eb7a9\",\n  measurementId: \"G-X72F7SKDRR\"\n};\nexport const createUser = async (userAuth, additionalData) => {\n  //If no user in  logged in just return null\n  if (!userAuth) {\n    return null;\n  } //If user is logged in check if the user's data exists in the firebase databasey\n\n\n  const useRef = firestore.doc(`users/${userAuth.displayName}`);\n  const snapShot = await useRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await useRef.set({\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/exist/Documents/VeganShop/ahimsa/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUser","userAuth","additionalData","useRef","firestore","doc","displayName","snapShot","get","exists","email","createdAt","Date","set","error","console","log","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,8BAFD;AAGXC,EAAAA,WAAW,EAAE,qCAHF;AAIXC,EAAAA,SAAS,EAAE,cAJA;AAKXC,EAAAA,aAAa,EAAE,0BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAUA,OAAO,MAAOC,UAAU,GAAC,OAAMC,QAAN,EAAeC,cAAf,KACzB;AAAG;AACC,MAAG,CAACD,QAAJ,EACA;AACI,WAAO,IAAP;AACH,GAJL,CAKI;;;AACF,QAAME,MAAM,GAACC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,WAAY,EAA5C,CAAb;AACA,QAAMC,QAAQ,GAAC,MAAMJ,MAAM,CAACK,GAAP,EAArB;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EACA;AACM,UAAM;AAACH,MAAAA,WAAD;AAAaI,MAAAA;AAAb,QAAoBT,QAA1B;AACA,UAAMU,SAAS,GAAC,IAAIC,IAAJ,EAAhB;;AACA,QAAI;AACI,YAAMT,MAAM,CAACU,GAAP,CAAW;AACbP,QAAAA,WADa;AAEbI,QAAAA,KAFa;AAGbC,QAAAA;AAHa,OAAX,CAAN;AAKP,KAND,CAME,OAAOG,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEH;AACN;AAEF,CAzBM;AA0BPxB,QAAQ,CAAC2B,aAAT,CAAuB1B,MAAvB;AAEA,OAAO,MAAM2B,IAAI,GAAG5B,QAAQ,CAAC4B,IAAT,EAAb;AACP,OAAO,MAAMd,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMe,QAAQ,GAAG,IAAI7B,QAAQ,CAAC4B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe7B,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCEY9NcbLCRUo1bGQi8wFUEzo7N_B3j5B0\",\r\n    authDomain: \"ahimsa-a62aa.firebaseapp.com\",\r\n    databaseURL: \"https://ahimsa-a62aa.firebaseio.com\",\r\n    projectId: \"ahimsa-a62aa\",\r\n    storageBucket: \"ahimsa-a62aa.appspot.com\",\r\n    messagingSenderId: \"736204403852\",\r\n    appId: \"1:736204403852:web:45c3c91bc49e5b492eb7a9\",\r\n    measurementId: \"G-X72F7SKDRR\",\r\n};\r\nexport const  createUser=async(userAuth,additionalData)=>\r\n{  //If no user in  logged in just return null\r\n    if(!userAuth)\r\n    {\r\n        return null\r\n    }\r\n    //If user is logged in check if the user's data exists in the firebase databasey\r\n  const useRef=firestore.doc(`users/${userAuth.displayName}`)\r\n  const snapShot=await useRef.get();\r\n  if(!snapShot.exists)\r\n  {\r\n        const {displayName,email}=userAuth;\r\n        const createdAt=new Date()\r\n        try {\r\n                await useRef.set({\r\n                    displayName,\r\n                    email,\r\n                    createdAt\r\n                })\r\n        } catch (error) {\r\n            console.log(error)\r\n            \r\n        }\r\n  }\r\n\r\n}\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}