{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCEY9NcbLCRUo1bGQi8wFUEzo7N_B3j5B0\",\n  authDomain: \"ahimsa-a62aa.firebaseapp.com\",\n  databaseURL: \"https://ahimsa-a62aa.firebaseio.com\",\n  projectId: \"ahimsa-a62aa\",\n  storageBucket: \"ahimsa-a62aa.appspot.com\",\n  messagingSenderId: \"736204403852\",\n  appId: \"1:736204403852:web:45c3c91bc49e5b492eb7a9\",\n  measurementId: \"G-X72F7SKDRR\"\n};\nexport const createUser = async (userAuth, displayName, note) => {\n  //If no user in  logged in just return null\n  //If user is logged in check if the user's data exists in the firebase databasey\n  alert(note);\n  const useRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await useRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await useRef.set({\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return useRef;\n}; //we can use batch processing\n\nexport const addDatatoFireBase = (collectionKey, objectToadd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  objectToadd.forEach(object => {\n    collectionRef.doc().set(object);\n  });\n};\nexport const convertCollectionSnapshotToMap = collection => {\n  const transformedCollection = collection.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/exist/Documents/VeganShop/ahimsa/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUser","userAuth","displayName","note","alert","useRef","firestore","doc","uid","snapShot","get","exists","email","createdAt","Date","set","error","console","log","addDatatoFireBase","collectionKey","objectToadd","collectionRef","collection","forEach","object","convertCollectionSnapshotToMap","transformedCollection","docs","map","title","items","data","routeName","encodeURI","id","reduce","accumulator","toLowerCase","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCEY9NcbLCRUo1bGQi8wFUEzo7N_B3j5B0\",\r\n  authDomain: \"ahimsa-a62aa.firebaseapp.com\",\r\n  databaseURL: \"https://ahimsa-a62aa.firebaseio.com\",\r\n  projectId: \"ahimsa-a62aa\",\r\n  storageBucket: \"ahimsa-a62aa.appspot.com\",\r\n  messagingSenderId: \"736204403852\",\r\n  appId: \"1:736204403852:web:45c3c91bc49e5b492eb7a9\",\r\n  measurementId: \"G-X72F7SKDRR\",\r\n};\r\nexport const createUser = async (userAuth, displayName, note) => {\r\n  //If no user in  logged in just return null\r\n\r\n  //If user is logged in check if the user's data exists in the firebase databasey\r\n alert(note)\r\n  const useRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await useRef.get();\r\n  if (!snapShot.exists) {\r\n    const { email } = userAuth;\r\n\r\n    const createdAt = new Date();\r\n    try {\r\n      await useRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  return useRef;\r\n};\r\n//we can use batch processing\r\nexport const addDatatoFireBase = (collectionKey, objectToadd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  objectToadd.forEach((object) => {\r\n    collectionRef.doc().set(object);\r\n  });\r\n};\r\nexport const convertCollectionSnapshotToMap = (collection) => {\r\n  const transformedCollection = collection.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}